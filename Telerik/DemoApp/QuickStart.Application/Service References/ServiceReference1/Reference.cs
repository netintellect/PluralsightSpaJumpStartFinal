//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Telerik.Windows.QuickStart.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://developer.sharpdevelop.net/CodeConverter.NET/", ConfigurationName="ServiceReference1.ConvertServiceSoap")]
    public interface ConvertServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.sharpdevelop.net/CodeConverter.NET/PerformConversion", ReplyAction="*")]
        Telerik.Windows.QuickStart.ServiceReference1.PerformConversionResponse PerformConversion(Telerik.Windows.QuickStart.ServiceReference1.PerformConversionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://developer.sharpdevelop.net/CodeConverter.NET/PerformConversion", ReplyAction="*")]
        System.IAsyncResult BeginPerformConversion(Telerik.Windows.QuickStart.ServiceReference1.PerformConversionRequest request, System.AsyncCallback callback, object asyncState);
        
        Telerik.Windows.QuickStart.ServiceReference1.PerformConversionResponse EndPerformConversion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.sharpdevelop.net/CodeConverter.NET/Convert", ReplyAction="*")]
        Telerik.Windows.QuickStart.ServiceReference1.ConvertResponse Convert(Telerik.Windows.QuickStart.ServiceReference1.ConvertRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://developer.sharpdevelop.net/CodeConverter.NET/Convert", ReplyAction="*")]
        System.IAsyncResult BeginConvert(Telerik.Windows.QuickStart.ServiceReference1.ConvertRequest request, System.AsyncCallback callback, object asyncState);
        
        Telerik.Windows.QuickStart.ServiceReference1.ConvertResponse EndConvert(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://developer.sharpdevelop.net/CodeConverter.NET/ConvertSnippet", ReplyAction="*")]
        Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetResponse ConvertSnippet(Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://developer.sharpdevelop.net/CodeConverter.NET/ConvertSnippet", ReplyAction="*")]
        System.IAsyncResult BeginConvertSnippet(Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetRequest request, System.AsyncCallback callback, object asyncState);
        
        Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetResponse EndConvertSnippet(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class PerformConversionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="PerformConversion", Namespace="http://developer.sharpdevelop.net/CodeConverter.NET/", Order=0)]
        public Telerik.Windows.QuickStart.ServiceReference1.PerformConversionRequestBody Body;
        
        public PerformConversionRequest() {
        }
        
        public PerformConversionRequest(Telerik.Windows.QuickStart.ServiceReference1.PerformConversionRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://developer.sharpdevelop.net/CodeConverter.NET/")]
    public partial class PerformConversionRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string TypeOfConversion;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string SourceCode;
        
        public PerformConversionRequestBody() {
        }
        
        public PerformConversionRequestBody(string TypeOfConversion, string SourceCode) {
            this.TypeOfConversion = TypeOfConversion;
            this.SourceCode = SourceCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class PerformConversionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="PerformConversionResponse", Namespace="http://developer.sharpdevelop.net/CodeConverter.NET/", Order=0)]
        public Telerik.Windows.QuickStart.ServiceReference1.PerformConversionResponseBody Body;
        
        public PerformConversionResponse() {
        }
        
        public PerformConversionResponse(Telerik.Windows.QuickStart.ServiceReference1.PerformConversionResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://developer.sharpdevelop.net/CodeConverter.NET/")]
    public partial class PerformConversionResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool PerformConversionResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string ConvertedCode;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string ErrorMessage;
        
        public PerformConversionResponseBody() {
        }
        
        public PerformConversionResponseBody(bool PerformConversionResult, string ConvertedCode, string ErrorMessage) {
            this.PerformConversionResult = PerformConversionResult;
            this.ConvertedCode = ConvertedCode;
            this.ErrorMessage = ErrorMessage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ConvertRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="Convert", Namespace="http://developer.sharpdevelop.net/CodeConverter.NET/", Order=0)]
        public Telerik.Windows.QuickStart.ServiceReference1.ConvertRequestBody Body;
        
        public ConvertRequest() {
        }
        
        public ConvertRequest(Telerik.Windows.QuickStart.ServiceReference1.ConvertRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://developer.sharpdevelop.net/CodeConverter.NET/")]
    public partial class ConvertRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string TypeOfConversion;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string SourceCode;
        
        public ConvertRequestBody() {
        }
        
        public ConvertRequestBody(string TypeOfConversion, string SourceCode) {
            this.TypeOfConversion = TypeOfConversion;
            this.SourceCode = SourceCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ConvertResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ConvertResponse", Namespace="http://developer.sharpdevelop.net/CodeConverter.NET/", Order=0)]
        public Telerik.Windows.QuickStart.ServiceReference1.ConvertResponseBody Body;
        
        public ConvertResponse() {
        }
        
        public ConvertResponse(Telerik.Windows.QuickStart.ServiceReference1.ConvertResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://developer.sharpdevelop.net/CodeConverter.NET/")]
    public partial class ConvertResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool ConvertResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string ConvertedCode;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string ErrorMessage;
        
        public ConvertResponseBody() {
        }
        
        public ConvertResponseBody(bool ConvertResult, string ConvertedCode, string ErrorMessage) {
            this.ConvertResult = ConvertResult;
            this.ConvertedCode = ConvertedCode;
            this.ErrorMessage = ErrorMessage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ConvertSnippetRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ConvertSnippet", Namespace="http://developer.sharpdevelop.net/CodeConverter.NET/", Order=0)]
        public Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetRequestBody Body;
        
        public ConvertSnippetRequest() {
        }
        
        public ConvertSnippetRequest(Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://developer.sharpdevelop.net/CodeConverter.NET/")]
    public partial class ConvertSnippetRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string TypeOfConversion;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string SourceCode;
        
        public ConvertSnippetRequestBody() {
        }
        
        public ConvertSnippetRequestBody(string TypeOfConversion, string SourceCode) {
            this.TypeOfConversion = TypeOfConversion;
            this.SourceCode = SourceCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ConvertSnippetResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ConvertSnippetResponse", Namespace="http://developer.sharpdevelop.net/CodeConverter.NET/", Order=0)]
        public Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetResponseBody Body;
        
        public ConvertSnippetResponse() {
        }
        
        public ConvertSnippetResponse(Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://developer.sharpdevelop.net/CodeConverter.NET/")]
    public partial class ConvertSnippetResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool ConvertSnippetResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string ConvertedCode;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string ErrorMessage;
        
        public ConvertSnippetResponseBody() {
        }
        
        public ConvertSnippetResponseBody(bool ConvertSnippetResult, string ConvertedCode, string ErrorMessage) {
            this.ConvertSnippetResult = ConvertSnippetResult;
            this.ConvertedCode = ConvertedCode;
            this.ErrorMessage = ErrorMessage;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ConvertServiceSoapChannel : Telerik.Windows.QuickStart.ServiceReference1.ConvertServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PerformConversionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PerformConversionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Telerik.Windows.QuickStart.ServiceReference1.PerformConversionResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Telerik.Windows.QuickStart.ServiceReference1.PerformConversionResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Telerik.Windows.QuickStart.ServiceReference1.ConvertResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Telerik.Windows.QuickStart.ServiceReference1.ConvertResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertSnippetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertSnippetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertServiceSoapClient : System.ServiceModel.ClientBase<Telerik.Windows.QuickStart.ServiceReference1.ConvertServiceSoap>, Telerik.Windows.QuickStart.ServiceReference1.ConvertServiceSoap {
        
        private BeginOperationDelegate onBeginPerformConversionDelegate;
        
        private EndOperationDelegate onEndPerformConversionDelegate;
        
        private System.Threading.SendOrPostCallback onPerformConversionCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertDelegate;
        
        private EndOperationDelegate onEndConvertDelegate;
        
        private System.Threading.SendOrPostCallback onConvertCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertSnippetDelegate;
        
        private EndOperationDelegate onEndConvertSnippetDelegate;
        
        private System.Threading.SendOrPostCallback onConvertSnippetCompletedDelegate;
        
        public ConvertServiceSoapClient() {
        }
        
        public ConvertServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConvertServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConvertServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConvertServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<PerformConversionCompletedEventArgs> PerformConversionCompleted;
        
        public event System.EventHandler<ConvertCompletedEventArgs> ConvertCompleted;
        
        public event System.EventHandler<ConvertSnippetCompletedEventArgs> ConvertSnippetCompleted;
        
        public Telerik.Windows.QuickStart.ServiceReference1.PerformConversionResponse PerformConversion(Telerik.Windows.QuickStart.ServiceReference1.PerformConversionRequest request) {
            return base.Channel.PerformConversion(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPerformConversion(Telerik.Windows.QuickStart.ServiceReference1.PerformConversionRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPerformConversion(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Telerik.Windows.QuickStart.ServiceReference1.PerformConversionResponse EndPerformConversion(System.IAsyncResult result) {
            return base.Channel.EndPerformConversion(result);
        }
        
        private System.IAsyncResult OnBeginPerformConversion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Telerik.Windows.QuickStart.ServiceReference1.PerformConversionRequest request = ((Telerik.Windows.QuickStart.ServiceReference1.PerformConversionRequest)(inValues[0]));
            return this.BeginPerformConversion(request, callback, asyncState);
        }
        
        private object[] OnEndPerformConversion(System.IAsyncResult result) {
            Telerik.Windows.QuickStart.ServiceReference1.PerformConversionResponse retVal = this.EndPerformConversion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPerformConversionCompleted(object state) {
            if ((this.PerformConversionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PerformConversionCompleted(this, new PerformConversionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PerformConversionAsync(Telerik.Windows.QuickStart.ServiceReference1.PerformConversionRequest request) {
            this.PerformConversionAsync(request, null);
        }
        
        public void PerformConversionAsync(Telerik.Windows.QuickStart.ServiceReference1.PerformConversionRequest request, object userState) {
            if ((this.onBeginPerformConversionDelegate == null)) {
                this.onBeginPerformConversionDelegate = new BeginOperationDelegate(this.OnBeginPerformConversion);
            }
            if ((this.onEndPerformConversionDelegate == null)) {
                this.onEndPerformConversionDelegate = new EndOperationDelegate(this.OnEndPerformConversion);
            }
            if ((this.onPerformConversionCompletedDelegate == null)) {
                this.onPerformConversionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPerformConversionCompleted);
            }
            base.InvokeAsync(this.onBeginPerformConversionDelegate, new object[] {
                        request}, this.onEndPerformConversionDelegate, this.onPerformConversionCompletedDelegate, userState);
        }
        
        public Telerik.Windows.QuickStart.ServiceReference1.ConvertResponse Convert(Telerik.Windows.QuickStart.ServiceReference1.ConvertRequest request) {
            return base.Channel.Convert(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvert(Telerik.Windows.QuickStart.ServiceReference1.ConvertRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvert(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Telerik.Windows.QuickStart.ServiceReference1.ConvertResponse EndConvert(System.IAsyncResult result) {
            return base.Channel.EndConvert(result);
        }
        
        private System.IAsyncResult OnBeginConvert(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Telerik.Windows.QuickStart.ServiceReference1.ConvertRequest request = ((Telerik.Windows.QuickStart.ServiceReference1.ConvertRequest)(inValues[0]));
            return this.BeginConvert(request, callback, asyncState);
        }
        
        private object[] OnEndConvert(System.IAsyncResult result) {
            Telerik.Windows.QuickStart.ServiceReference1.ConvertResponse retVal = this.EndConvert(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertCompleted(object state) {
            if ((this.ConvertCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertCompleted(this, new ConvertCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertAsync(Telerik.Windows.QuickStart.ServiceReference1.ConvertRequest request) {
            this.ConvertAsync(request, null);
        }
        
        public void ConvertAsync(Telerik.Windows.QuickStart.ServiceReference1.ConvertRequest request, object userState) {
            if ((this.onBeginConvertDelegate == null)) {
                this.onBeginConvertDelegate = new BeginOperationDelegate(this.OnBeginConvert);
            }
            if ((this.onEndConvertDelegate == null)) {
                this.onEndConvertDelegate = new EndOperationDelegate(this.OnEndConvert);
            }
            if ((this.onConvertCompletedDelegate == null)) {
                this.onConvertCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertCompleted);
            }
            base.InvokeAsync(this.onBeginConvertDelegate, new object[] {
                        request}, this.onEndConvertDelegate, this.onConvertCompletedDelegate, userState);
        }
        
        public Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetResponse ConvertSnippet(Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetRequest request) {
            return base.Channel.ConvertSnippet(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvertSnippet(Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertSnippet(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetResponse EndConvertSnippet(System.IAsyncResult result) {
            return base.Channel.EndConvertSnippet(result);
        }
        
        private System.IAsyncResult OnBeginConvertSnippet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetRequest request = ((Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetRequest)(inValues[0]));
            return this.BeginConvertSnippet(request, callback, asyncState);
        }
        
        private object[] OnEndConvertSnippet(System.IAsyncResult result) {
            Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetResponse retVal = this.EndConvertSnippet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertSnippetCompleted(object state) {
            if ((this.ConvertSnippetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertSnippetCompleted(this, new ConvertSnippetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertSnippetAsync(Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetRequest request) {
            this.ConvertSnippetAsync(request, null);
        }
        
        public void ConvertSnippetAsync(Telerik.Windows.QuickStart.ServiceReference1.ConvertSnippetRequest request, object userState) {
            if ((this.onBeginConvertSnippetDelegate == null)) {
                this.onBeginConvertSnippetDelegate = new BeginOperationDelegate(this.OnBeginConvertSnippet);
            }
            if ((this.onEndConvertSnippetDelegate == null)) {
                this.onEndConvertSnippetDelegate = new EndOperationDelegate(this.OnEndConvertSnippet);
            }
            if ((this.onConvertSnippetCompletedDelegate == null)) {
                this.onConvertSnippetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertSnippetCompleted);
            }
            base.InvokeAsync(this.onBeginConvertSnippetDelegate, new object[] {
                        request}, this.onEndConvertSnippetDelegate, this.onConvertSnippetCompletedDelegate, userState);
        }
    }
}
